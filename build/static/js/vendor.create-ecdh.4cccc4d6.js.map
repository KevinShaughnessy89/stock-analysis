{"version":3,"file":"static/js/vendor.create-ecdh.4cccc4d6.js","mappings":"oHAAIA,EAAWC,EAAQ,OACnBC,EAAKD,EAAQ,OAEjBE,EAAOC,QAAU,SAAqBC,GACpC,OAAO,IAAIC,EAAKD,EAClB,EAEA,IAAIE,EAAU,CACZC,UAAW,CACTC,KAAM,YACNC,WAAY,IAEdC,UAAW,CACTF,KAAM,OACNC,WAAY,IAEdE,WAAY,CACVH,KAAM,OACNC,WAAY,IAEdG,WAAY,CACVJ,KAAM,OACNC,WAAY,IAEdI,QAAS,CACPL,KAAM,UACNC,WAAY,IAEdK,UAAW,CACTN,KAAM,OACNC,WAAY,IAEdM,UAAW,CACTP,KAAM,OACNC,WAAY,KAUhB,SAASJ,EAAMD,GACbY,KAAKC,UAAYX,EAAQF,GACpBY,KAAKC,YACRD,KAAKC,UAAY,CACfT,KAAMJ,IAGVY,KAAKZ,MAAQ,IAAIL,EAASmB,GAAGF,KAAKC,UAAUT,MAC5CQ,KAAKG,UAAO,CACd,CAuDA,SAASC,EAAmBC,EAAIC,EAAKC,GAC9BC,MAAMC,QAAQJ,KACjBA,EAAKA,EAAGK,WAEV,IAAIC,EAAM,IAAIC,EAAOP,GACrB,GAAIE,GAAOI,EAAIE,OAASN,EAAK,CAC3B,IAAIO,EAAQ,IAAIF,EAAOL,EAAMI,EAAIE,QACjCC,EAAMC,KAAK,GACXJ,EAAMC,EAAOI,OAAO,CAACF,EAAOH,GAC9B,CACA,OAAKL,EAGIK,EAAIM,SAASX,GAFbK,CAIX,CArFArB,EAAQ4B,KAAO5B,EAAQI,UACvBJ,EAAQ6B,KAAO7B,EAAQ8B,UAAY9B,EAAQK,WAC3CL,EAAQ+B,KAAO/B,EAAQgC,UAAYhC,EAAQM,WAC3CN,EAAQiC,KAAOjC,EAAQQ,UACvBR,EAAQkC,KAAOlC,EAAQS,UAavBV,EAAKoC,UAAUC,aAAe,SAAUpB,EAAKqB,GAE3C,OADA3B,KAAKG,KAAOH,KAAKZ,MAAMwC,aAChB5B,KAAK6B,aAAavB,EAAKqB,EAChC,EAEAtC,EAAKoC,UAAUK,cAAgB,SAAUC,EAAOC,EAAO1B,GAOrD,OANA0B,EAAQA,GAAS,OACZpB,EAAOqB,SAASF,KACnBA,EAAQ,IAAInB,EAAOmB,EAAOC,IAIrB5B,EAFQJ,KAAKZ,MAAM8C,cAAcH,GAAOI,YAC5BC,IAAIpC,KAAKG,KAAKkC,cAAcC,OACjBhC,EAAKN,KAAKC,UAAUR,WACpD,EAEAJ,EAAKoC,UAAUI,aAAe,SAAUvB,EAAKqB,GAC3C,IAAIY,EAAMvC,KAAKG,KAAKgC,UAAqB,eAAXR,GAAyB,GAQvD,MAPe,WAAXA,IACEY,EAAIA,EAAI1B,OAAS,GAAK,EACxB0B,EAAI,GAAK,EAETA,EAAI,GAAK,GAGNnC,EAAkBmC,EAAKjC,EAChC,EAEAjB,EAAKoC,UAAUe,cAAgB,SAAUlC,GACvC,OAAOF,EAAkBJ,KAAKG,KAAKkC,aAAc/B,EACnD,EAEAjB,EAAKoC,UAAUgB,aAAe,SAAUC,EAAKpC,GAM3C,OALAA,EAAMA,GAAO,OACRM,EAAOqB,SAASS,KACnBA,EAAM,IAAI9B,EAAO8B,EAAKpC,IAExBN,KAAKG,KAAKwC,cAAcD,GACjB1C,IACT,EAEAX,EAAKoC,UAAUmB,cAAgB,SAAUC,EAAMvC,GAC7CA,EAAMA,GAAO,OACRM,EAAOqB,SAASY,KACnBA,EAAO,IAAIjC,EAAOiC,EAAMvC,IAG1B,IAAIwC,EAAQ,IAAI7D,EAAG4D,GAInB,OAHAC,EAAQA,EAAM7B,SAAS,IACvBjB,KAAKG,KAAOH,KAAKZ,MAAMwC,aACvB5B,KAAKG,KAAK4C,eAAeD,GAClB9C,IACT,C","sources":["../node_modules/create-ecdh/browser.js"],"sourcesContent":["var elliptic = require('elliptic')\nvar BN = require('bn.js')\n\nmodule.exports = function createECDH (curve) {\n  return new ECDH(curve)\n}\n\nvar aliases = {\n  secp256k1: {\n    name: 'secp256k1',\n    byteLength: 32\n  },\n  secp224r1: {\n    name: 'p224',\n    byteLength: 28\n  },\n  prime256v1: {\n    name: 'p256',\n    byteLength: 32\n  },\n  prime192v1: {\n    name: 'p192',\n    byteLength: 24\n  },\n  ed25519: {\n    name: 'ed25519',\n    byteLength: 32\n  },\n  secp384r1: {\n    name: 'p384',\n    byteLength: 48\n  },\n  secp521r1: {\n    name: 'p521',\n    byteLength: 66\n  }\n}\n\naliases.p224 = aliases.secp224r1\naliases.p256 = aliases.secp256r1 = aliases.prime256v1\naliases.p192 = aliases.secp192r1 = aliases.prime192v1\naliases.p384 = aliases.secp384r1\naliases.p521 = aliases.secp521r1\n\nfunction ECDH (curve) {\n  this.curveType = aliases[curve]\n  if (!this.curveType) {\n    this.curveType = {\n      name: curve\n    }\n  }\n  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap\n  this.keys = void 0\n}\n\nECDH.prototype.generateKeys = function (enc, format) {\n  this.keys = this.curve.genKeyPair()\n  return this.getPublicKey(enc, format)\n}\n\nECDH.prototype.computeSecret = function (other, inenc, enc) {\n  inenc = inenc || 'utf8'\n  if (!Buffer.isBuffer(other)) {\n    other = new Buffer(other, inenc)\n  }\n  var otherPub = this.curve.keyFromPublic(other).getPublic()\n  var out = otherPub.mul(this.keys.getPrivate()).getX()\n  return formatReturnValue(out, enc, this.curveType.byteLength)\n}\n\nECDH.prototype.getPublicKey = function (enc, format) {\n  var key = this.keys.getPublic(format === 'compressed', true)\n  if (format === 'hybrid') {\n    if (key[key.length - 1] % 2) {\n      key[0] = 7\n    } else {\n      key[0] = 6\n    }\n  }\n  return formatReturnValue(key, enc)\n}\n\nECDH.prototype.getPrivateKey = function (enc) {\n  return formatReturnValue(this.keys.getPrivate(), enc)\n}\n\nECDH.prototype.setPublicKey = function (pub, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(pub)) {\n    pub = new Buffer(pub, enc)\n  }\n  this.keys._importPublic(pub)\n  return this\n}\n\nECDH.prototype.setPrivateKey = function (priv, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(priv)) {\n    priv = new Buffer(priv, enc)\n  }\n\n  var _priv = new BN(priv)\n  _priv = _priv.toString(16)\n  this.keys = this.curve.genKeyPair()\n  this.keys._importPrivate(_priv)\n  return this\n}\n\nfunction formatReturnValue (bn, enc, len) {\n  if (!Array.isArray(bn)) {\n    bn = bn.toArray()\n  }\n  var buf = new Buffer(bn)\n  if (len && buf.length < len) {\n    var zeros = new Buffer(len - buf.length)\n    zeros.fill(0)\n    buf = Buffer.concat([zeros, buf])\n  }\n  if (!enc) {\n    return buf\n  } else {\n    return buf.toString(enc)\n  }\n}\n"],"names":["elliptic","require","BN","module","exports","curve","ECDH","aliases","secp256k1","name","byteLength","secp224r1","prime256v1","prime192v1","ed25519","secp384r1","secp521r1","this","curveType","ec","keys","formatReturnValue","bn","enc","len","Array","isArray","toArray","buf","Buffer","length","zeros","fill","concat","toString","p224","p256","secp256r1","p192","secp192r1","p384","p521","prototype","generateKeys","format","genKeyPair","getPublicKey","computeSecret","other","inenc","isBuffer","keyFromPublic","getPublic","mul","getPrivate","getX","key","getPrivateKey","setPublicKey","pub","_importPublic","setPrivateKey","priv","_priv","_importPrivate"],"sourceRoot":""}