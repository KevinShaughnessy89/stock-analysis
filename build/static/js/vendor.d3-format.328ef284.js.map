{"version":3,"file":"static/js/vendor.d3-format.328ef284.js","mappings":"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","sources":["../node_modules/d3-format/src/formatDecimal.js","../node_modules/d3-format/src/formatSpecifier.js","../node_modules/d3-format/src/formatPrefixAuto.js","../node_modules/d3-format/src/formatRounded.js","../node_modules/d3-format/src/formatTypes.js","../node_modules/d3-format/src/identity.js","../node_modules/d3-format/src/locale.js","../node_modules/d3-format/src/defaultLocale.js","../node_modules/d3-format/src/formatGroup.js","../node_modules/d3-format/src/formatNumerals.js","../node_modules/d3-format/src/formatTrim.js","../node_modules/d3-format/src/exponent.js"],"sourcesContent":["export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, Â±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"Âµ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer âvalueâ part that can be\n        // grouped, and fractional or exponential âsuffixâ part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n"],"names":["formatDecimalParts","x","p","i","toExponential","indexOf","coefficient","slice","length","prefixExponent","re","formatSpecifier","specifier","match","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","this","undefined","d","exponent","Array","join","prototype","toString","Math","max","toFixed","round","abs","toLocaleString","replace","toPrecision","formatRounded","min","floor","n","toUpperCase","locale","format","map","prefixes","grouping","thousands","group","identity","call","Number","value","t","j","g","push","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","newFormat","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","c","valuePrefix","valueSuffix","valueNegative","isNaN","s","out","i1","i0","formatTrim","charCodeAt","Infinity","padding","formatPrefix","f","e","NaN","k","pow","formatLocale"],"sourceRoot":""}