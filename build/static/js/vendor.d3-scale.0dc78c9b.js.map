{"version":3,"file":"static/js/vendor.d3-scale.0dc78c9b.js","mappings":"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","sources":["../node_modules/d3-scale/node_modules/d3-format/src/formatPrefixAuto.js","../node_modules/d3-scale/node_modules/d3-format/src/formatRounded.js","../node_modules/d3-scale/node_modules/d3-format/src/formatTypes.js","../node_modules/d3-scale/node_modules/d3-format/src/identity.js","../node_modules/d3-scale/node_modules/d3-format/src/locale.js","../node_modules/d3-scale/node_modules/d3-format/src/defaultLocale.js","../node_modules/d3-scale/node_modules/d3-format/src/formatGroup.js","../node_modules/d3-scale/node_modules/d3-format/src/formatNumerals.js","../node_modules/d3-scale/node_modules/d3-format/src/formatTrim.js","../node_modules/d3-scale/node_modules/d3-format/src/exponent.js","../node_modules/d3-scale/node_modules/d3-format/src/formatDecimal.js","../node_modules/d3-scale/node_modules/d3-format/src/formatSpecifier.js","../node_modules/d3-scale/src/band.js","../node_modules/d3-scale/src/number.js","../node_modules/d3-scale/src/continuous.js","../node_modules/d3-scale/src/constant.js","../node_modules/d3-scale/src/init.js","../node_modules/d3-scale/src/tickFormat.js","../node_modules/d3-scale/node_modules/d3-format/src/precisionPrefix.js","../node_modules/d3-scale/node_modules/d3-format/src/precisionRound.js","../node_modules/d3-scale/node_modules/d3-format/src/precisionFixed.js","../node_modules/d3-scale/src/linear.js","../node_modules/d3-scale/src/log.js","../node_modules/d3-scale/src/nice.js","../node_modules/d3-scale/src/ordinal.js","../node_modules/d3-scale/src/symlog.js","../node_modules/d3-scale/src/time.js","../node_modules/d3-scale/src/utcTime.js"],"sourcesContent":["import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init.js\";\nimport ordinal from \"./ordinal.js\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {ticks} from \"d3-array\";\nimport {format, formatSpecifier} from \"d3-format\";\nimport nice from \"./nice.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : x => Math.pow(base, x);\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), x => Math.log(x) / base);\n}\n\nfunction reflect(f) {\n  return (x, k) => -f(-x, k);\n}\n\nexport function loggish(transform) {\n  const scale = transform(transformLog, transformExp);\n  const domain = scale.domain;\n  let base = 10;\n  let logs;\n  let pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = count => {\n    const d = domain();\n    let u = d[0];\n    let v = d[d.length - 1];\n    const r = v < u;\n\n    if (r) ([u, v] = [v, u]);\n\n    let i = logs(u);\n    let j = logs(v);\n    let k;\n    let t;\n    const n = count == null ? 10 : +count;\n    let z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1; k < base; ++k) {\n          t = i < 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1; k >= 1; --k) {\n          t = i > 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = (count, specifier) => {\n    if (count == null) count = 10;\n    if (specifier == null) specifier = base === 10 ? \"s\" : \",\";\n    if (typeof specifier !== \"function\") {\n      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;\n      specifier = format(specifier);\n    }\n    if (count === Infinity) return specifier;\n    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return d => {\n      let i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = () => {\n    return domain(nice(domain(), {\n      floor: x => pows(Math.floor(logs(x))),\n      ceil: x => pows(Math.ceil(logs(x)))\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  const scale = loggish(transformer()).domain([1, 10]);\n  scale.copy = () => copy(scale, log()).base(scale.base());\n  initRange.apply(scale, arguments);\n  return scale;\n}\n","export default function nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {InternMap} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nexport function symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nexport default function symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeTicks, timeTickInterval} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport nice from \"./nice.js\";\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    return interval ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n  };\n\n  return scale;\n}\n\nexport default function time() {\n  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","import {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcTicks, utcTickInterval} from \"d3-time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {calendar} from \"./time.js\";\nimport {initRange} from \"./init.js\";\n\nexport default function utcTime() {\n  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n"],"names":["prefixExponent","x","p","d","formatDecimalParts","coefficient","exponent","Array","join","length","slice","%","toFixed","Math","round","toString","formatDecimal","e","toExponential","f","g","toPrecision","formatRounded","i","max","min","floor","n","toUpperCase","locale","format","formatPrefix","map","prototype","prefixes","grouping","thousands","group","undefined","identity","call","Number","value","width","t","j","push","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","replace","formatNumerals","String","percent","minus","nan","newFormat","specifier","fill","formatSpecifier","align","sign","symbol","zero","comma","precision","trim","type","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","c","valuePrefix","valueSuffix","valueNegative","isNaN","abs","s","out","i1","i0","formatTrim","charCodeAt","Infinity","padding","k","pow","formatLocale","NaN","toLocaleString","indexOf","re","match","exec","Error","FormatSpecifier","this","band","step","bandwidth","scale","ordinal","unknown","domain","ordinalRange","range","r0","r1","paddingInner","paddingOuter","rescale","start","stop","values","sequence","_","arguments","rangeRound","copy","initRange","apply","pointish","point","number","unit","normalize","a","b","bimap","interpolate","d0","d1","polymap","r","bisect","source","target","clamp","transformer","transform","untransform","piecewise","output","input","interpolateValue","clamper","invert","y","interpolateNumber","from","interpolateRound","u","continuous","tickFormat","count","tickStep","precisionPrefix","precisionRound","precisionFixed","linearish","ticks","nice","prestep","maxIter","tickIncrement","ceil","linear","transformLog","log","transformExp","exp","transformLogn","transformExpn","pow10","isFinite","reflect","loggish","logs","pows","base","E","log10","log2","logp","powp","v","z","interval","x0","x1","implicit","Symbol","index","InternMap","get","set","has","transformSymlog","log1p","transformSymexp","expm1","symlog","constant","symlogish","date","Date","calendar","tickInterval","year","month","week","day","hour","minute","second","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","time","timeTicks","timeTickInterval","timeYear","timeMonth","timeWeek","timeDay","timeHour","timeMinute","timeSecond","timeFormat","utcTime","utcTicks","utcTickInterval","utcYear","utcMonth","utcWeek","utcDay","utcHour","utcMinute","utcSecond","utcFormat","UTC"],"sourceRoot":""}