(self.webpackChunkweb_scraper=self.webpackChunkweb_scraper||[]).push([[9087],{97804:(e,t,o)=>{var n=o(27256),r=o(88381).Buffer;const s=o(72016),i=o(6285),a=o(95667),c=o(83447),l=o(80056).version,p=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function d(e){console.log(`[dotenv@${l}][DEBUG] ${e}`)}function E(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.DOTENV_KEY&&{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.DOTENV_KEY.length>0?{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.DOTENV_KEY:""}function u(e,t){let o;try{o=new URL(t)}catch(a){if("ERR_INVALID_URL"===a.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw a}const n=o.password;if(!n){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=o.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,i=e.parsed[s];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:n}}function _(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const o of e.path)s.existsSync(o)&&(t=o.endsWith(".vault")?o:`${o}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=i.resolve(n.cwd(),".env.vault");return s.existsSync(t)?t:null}function v(e){return"~"===e[0]?i.join(a.homedir(),e.slice(1)):e}const f={configDotenv:function(e){const t=i.resolve(n.cwd(),".env");let o="utf8";const r=Boolean(e&&e.debug);e&&e.encoding?o=e.encoding:r&&d("No encoding is specified. UTF-8 is used by default");let a,c=[t];if(e&&e.path)if(Array.isArray(e.path)){c=[];for(const t of e.path)c.push(v(t))}else c=[v(e.path)];const l={};for(const n of c)try{const t=f.parse(s.readFileSync(n,{encoding:o}));f.populate(l,t,e)}catch(E){r&&d(`Failed to load ${n} ${E.message}`),a=E}let p={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0};return e&&null!=e.processEnv&&(p=e.processEnv),f.populate(p,l,e),a?{parsed:l,error:a}:{parsed:l}},_configVault:function(e){var t;t="Loading env from encrypted .env.vault",console.log(`[dotenv@${l}][INFO] ${t}`);const o=f._parseVault(e);let n={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0};return e&&null!=e.processEnv&&(n=e.processEnv),f.populate(n,o,e),{parsed:o}},_parseVault:function(e){const t=_(e),o=f.configDotenv({path:t});if(!o.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const n=E(e).split(","),r=n.length;let s;for(let a=0;a<r;a++)try{const e=u(o,n[a].trim());s=f.decrypt(e.ciphertext,e.key);break}catch(i){if(a+1>=r)throw i}return f.parse(s)},config:function(e){if(0===E(e).length)return f.configDotenv(e);const t=_(e);return t?f._configVault(e):(o=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${l}][WARN] ${o}`),f.configDotenv(e));var o},decrypt:function(e,t){const o=r.from(t.slice(-64),"hex");let n=r.from(e,"base64");const s=n.subarray(0,12),i=n.subarray(-16);n=n.subarray(12,-16);try{const e=c.createDecipheriv("aes-256-gcm",o,s);return e.setAuthTag(i),`${e.update(n)}${e.final()}`}catch(a){const e=a instanceof RangeError,t="Invalid key length"===a.message,o="Unsupported state or unable to authenticate data"===a.message;if(e||t){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(o){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw a}},parse:function(e){const t={};let o,n=e.toString();for(n=n.replace(/\r\n?/gm,"\n");null!=(o=p.exec(n));){const e=o[1];let n=o[2]||"";n=n.trim();const r=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(n=n.replace(/\\n/g,"\n"),n=n.replace(/\\r/g,"\r")),t[e]=n}return t},populate:function(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n=Boolean(o&&o.debug),r=Boolean(o&&o.override);if("object"!==typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const s of Object.keys(t))Object.prototype.hasOwnProperty.call(e,s)?(!0===r&&(e[s]=t[s]),n&&d(!0===r?`"${s}" is already defined and WAS overwritten`:`"${s}" is already defined and was NOT overwritten`)):e[s]=t[s]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f},80056:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}}]);
//# sourceMappingURL=vendor.dotenv.4358b4ad.js.map