{"version":3,"file":"static/js/vendor.util-deprecate.63a6e01b.js","mappings":"8FAwDA,SAASA,EAAQC,GAEf,IACE,IAAKC,EAAAA,EAAOC,aAAc,OAAO,CACnC,CAAE,MAAOC,GACP,OAAO,CACT,CACA,IAAIC,EAAMH,EAAAA,EAAOC,aAAaF,GAC9B,OAAI,MAAQI,GACyB,SAA9BC,OAAOD,GAAKE,aACrB,CA7DAC,EAAOC,QAoBP,SAAoBC,EAAIC,GACtB,GAAIX,EAAO,iBACT,OAAOU,EAGT,IAAIE,GAAS,EAeb,OAdA,WACE,IAAKA,EAAQ,CACX,GAAIZ,EAAO,oBACT,MAAM,IAAIa,MAAMF,GACPX,EAAO,oBAChBc,QAAQC,MAAMJ,GAEdG,QAAQE,KAAKL,GAEfC,GAAS,CACX,CACA,OAAOF,EAAGO,MAAMC,KAAMC,UACxB,CAGF,C","sources":["../node_modules/util-deprecate/browser.js"],"sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"],"names":["config","name","global","localStorage","_","val","String","toLowerCase","module","exports","fn","msg","warned","Error","console","trace","warn","apply","this","arguments"],"sourceRoot":""}